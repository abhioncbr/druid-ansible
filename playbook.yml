---
#- hosts: 127.0.0.1
#  vars_files:
#    - vars/druid.yml
#  tasks:
#    - name: Preflight check AWS_KEYS
#      assert:
#        that: druid_s3_accessKey != '<AWS_ACCESS_KEY>' and druid_s3_secretKey != '<AWS_SECRET_KEY>'

- hosts: all
  become: yes
  gather_facts: yes
  vars_files:
    - vars/druid.yml
  roles:
    - preflight
    - commons.java
    - labs.cybereason

- hosts: cluster_druid_metadata_db
  vars_files:
    - vars/metrics.yml
  become: yes
  roles:
    - metrics.influxdb
    - metrics.grafana

  post_tasks:
    - name: Install influxdb python module
      pip:
        name: influxdb

    - name: Create influxdb database for druid metrics
      influxdb_database:
        hostname: "{{ ansible_fqdn | default(ansible_host) | default(inventory_hostname) }}"
        database_name: druid

    - name: Enable graphite in package-provided config
      blockinfile:
        dest: "{{ influxdb_config_file }}"
        marker: "  # {mark} ANSIBLE MANAGED GRAPHITE ENABLEMENT BLOCK"
        insertafter: ^\[\[graphite\]\]
        block: |2
            enabled = true
            database = "druid"
            templates = [
              "*.*.*.*.*.* env.service.hostname.dim1.dim2.measurement*",
              "*.*.*.*.* env.service.hostname.dim1.measurement*",
              "*.*.*.* env.service.hostname.measurement*"
            ]
      notify:
        - restart influxdb

    - name: Add kapacitor for influx db alerting
      yum:
        name: kapacitor

    - name: Add chronograf for influxdb exploration
      yum:
        name: chronograf

    - name: Start kapacitor and chronograf
      service:
        name: "{{ item }}"
        state: started
      with_items:
        - kapacitor
        - chronograf

    - name: Enable systemd for services
      service:
        name: "{{ item }}"
        enabled: yes
      with_items:
        - kapacitor
        - chronograf

- hosts: cluster_druid_metadata_db
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - metadata.postgres-common
    - { role: metadata.postgres-druid, become_user: postgres }

- hosts: cluster_druid_zookeeper
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - zookeeper

- hosts: cluster_druid:cluster_druid_zookeeper
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - commons.supervisor
    - druid.druid-common

- hosts: druid-historical:cluster_druid_zookeeper
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - druid.historical

- hosts: druid-coordinator
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - druid.coordinator

- hosts: druid-overlord
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - druid.overlord

- hosts: druid-broker
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - druid.broker

- hosts: druid-middlemanager
  vars_files:
    - vars/druid.yml
  become: yes
  roles:
    - druid.historical
    - druid.middle-manager

