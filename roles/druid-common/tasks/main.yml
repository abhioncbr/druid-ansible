- name: Check if druid base directory exists.
  stat:
    path: "{{ druid_base_dir }}"
  register: d_base_dir

- name: Create druid base directory.
  file:
    mode: 0755
    state: directory
    owner: "{{ default_user }}"
    group: "{{ default_group }}"
    path: "{{ druid_base_dir }}"
  when: d_base_dir.stat.exists == False

- name: Check if druid has already been downloaded and unpacked
  stat:
    path: "{{ installation_dir }}"
  register: d_installation_dir

- name: Download druid
  # Always call it druid-{{ druid_version }}-bin.tar.gz no matter if it is the real dist file or a gitlab artifact (in zip)
  # the unarchive module handles it nicely
  get_url:
    force: no
    dest: "{{ package_temp_dir }}"
    url: "{{ druid_download_url }}"
  when: d_installation_dir.stat.exists == False

- name: Unarchive druid
  unarchive:
    copy: no
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    dest: "{{ druid_base_dir }}"
    src: "{{ package_temp_dir }}"
  when: d_installation_dir.stat.exists == False

- name: Make sure druid is owned by druid_user
  file:
    mode: 0775
    recurse: yes
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    dest: "{{ installation_dir }}"
  when: d_installation_dir.stat.exists == False

- name: Create symlink to druid version dir
  file:
    mode: 0775
    state: link
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ installation_dir }}"
    dest: "{{ druid_base_dir }}/druid"
  when: d_installation_dir.stat.exists == False

- name: Ensure druid used directories exists
  file:
    mode: 0775
    state: directory
    path: "{{ item }}"
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
  with_items:
    - "{{ log_dir }}"
    - "{{ extensions_dir }}"
    - "{{ segment_cache_location }}"
    - "{{ indexer_task_baseDir }}"
#    - "{{ druid_indexer_task_hadoopWorkingPath }}"

- name: ensure druid config directories exists
  file:
    mode: 0775
    state: directory
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    path: "{{ conf_dir }}/{{ item }}"
  with_items:
    - _common
    - broker
    - coordinator
    - coordinator_parts
    - historical
    - indexing
  when: d_installation_dir.stat.exists == False

- name: Copy graphite emitter to tmp folder
  copy:
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ graphite_emitter_archive }}"
    dest: "{{ druid_tmpdir }}/graphite-emitter.tar.gz"
  when: d_installation_dir.stat.exists == False

- name: Unarchive graphite emitter to extension folder
  unarchive:
    copy: no
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ druid_tmpdir }}/graphite-emitter.tar.gz"
    dest: "{{ extensions_dir }}"
  when: d_installation_dir.stat.exists == False

- name: Copy metrics whiteList file
  copy:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: resources/whiteListMap.json
    dest: "{{ conf_dir }}"

- name: Copy over common runtime.properties
  template:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: _common/common.runtime.properties
    dest: "{{ conf_dir }}/_common/common.runtime.properties"

- name: Copy over common logging config
  template:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: _common/log4j2.xml
    dest: "{{ conf_dir }}/_common/log4j2.xml"

- name: Copy over other runtime.properties
  template:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ item }}/runtime.properties"
    dest: "{{ conf_dir }}/{{ item }}/runtime.properties"
  with_items:
    - broker
    - historical
    - coordinator_parts
    - indexing

- name: Copy over extra coordinator runtime.properties
  template:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ item }}/runtime.properties"
    dest: "{{ conf_dir }}/coordinator_parts/{{ item }}.runtime.properties"
  with_items:
    - indexing

- name: Merge coordinator runtime properties parts
  assemble:
    mode: 0664
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    src: "{{ conf_dir }}/coordinator_parts"
    dest: "{{ conf_dir }}/coordinator/runtime.properties"

- name: Create directory for symlink to druid configuration file
  file:
    state: directory
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    path: /etc/druid

- name: Create symlink to druid configuration folder
  file:
    mode: 0775
    state: link
    src: "{{ conf_dir }}"
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    dest: "{{ druid_conf_dir }}"

- name: Get postgres jdbc driver for druid
  get_url:
    mode: 0664
    force: true
    owner: "{{ druid_user }}"
    group: "{{ druid_group }}"
    url: "{{ druid_db_jdbc_download_url }}"
    dest: "{{ installation_dir }}/lib"
